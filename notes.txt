J'aimerais avoir un component banner générique 
(structure, positionnement, police,  taille du texte)

Mais plusieurs types possibles (info, succès, erreur, warning),
chaque type aura son icône associée (à gauche), sa couleur de fond et
sa couleur de police (blanche si fond foncée et noire si fond clair).



Faire du formulaire de login un composant (sans prendre en compte son 
positionnement là où il sera utilisé)




Faire en sorte de pouvoir afficher une bannière personnaliser
en appelant une fonction javascript depuis n'importe quelle page.
(type de bannière + message)



______________________________________________________________________








Révisions Angular :
-Basé sur le modèle MVC ou MVVM.
    -Les modèles sont représentés par les attributs de classe 
    de chaque composant individuel ou bien d'une classe externe importée.
    -Les vues sont représentées par les fichiers HTML et CSS
            de chaque composant individuel. Fait appel au controleur
            au travers d'actions menés par l'utilisateur (clic, formulaire,etc..)
    -Le controleur contient les fonctionnalités de l'appli, 
            mais on peut également utilisé des services
            à la place. Il accède aux modèles par appel au serveur
            pour récupérer les données nécessaires et transmissions à la vue.
            Réponse aux actions utilisateurs par éxecution des traitements associés.
            Consommation de services fournissant la logique fonctionnelle.

-Pour insérer un composant dans un autre composant, 
        on ajoute dans le code html du composant parent
        le selecteur du composant fils entre balises.
        Pour passer des valeurs du modèle du composant
        parent au modèle du composant fils, on peut
        les ajouter entre les balises HTML :
        <selecteur-fils [attrFils]="attrParent" [..]=".."></selecteur-fils>

(Data binding uni-directionnel <=> MVC)----------------------------

(Property Binding = Composant vers DOM)
-Pour afficher les valeurs des attributs d'un composant depuis
        son code HTML, on écrit le nom de l'attr entre double accolades :
        <img src="../../assets/{{type}}.svg">
-Pour modifier un élement du DOM : 
    <img [src]="url_model" />
    <.. [disabled]="bool-attr-model" />
    <.. [hidden]="bool-attr-model" />
-Pour modifier une directive d'attribut : 
    <div [ngStyle]="{color:couleur_modele}" />
-Pour modifier une données du modèle (@Input) :
    <comp-selector [attrEnInput]="une_var">

(Event Binding = DOM vers Composant)
-Gestion des événements utilisateur (clic, frappe clavier, touch, ..) :
(nom-event)="methode-composant()"

(Class et Style Binding (Element HTML))
Interaction entre le DOM et le composant, modifier dynamiquement
        une classe ou le style d'un élément en fonction du modèle :
    [class]="variable-string-model"
    [style]="variable-string-model"

---------------------------------------------------------------------


(Data binding bi-directionnel <=> MVVM)----------------------------------
-Pour mettre à jour une donnnée du modèle d'un composant depuis la vue :
    [(ngModel)]="variable-data-model"       <- dans une balise permettant
            une action de l'utilisateur (ex: input de type text)
------------------------------------------------------------------------


Les Directives sont des éléments d'Angular permettant une intéraction
avec le DOM, deux types de directives :
    -Directive d'attribut
    -Directive structurelle

On peut créer des Directives avec le décorateur @Directive.

(Permet de faire du data binding bi-directionnel)
Directives d'attribut : ngModel, ngClass et ngStyle :
 [ngClass]="{'nom-class': variable-model}"
 [ngStyle]=...

 (Responsables de la mise en page HTML)
 Directives structurelles
 -Permet d'ajouter, supprimer ou remplacer des éléments dans le DOM
 - *ngIf="condition" => ajoute ou supprime l'élément du DOM
 - *ngFor="let var of tableau_var" => itération sur une variable
        de type tableau ou objet, ex :
            <ul><li *ngFor="let var of tab_var"> {{var}}</li></ul>
- *ngSwitch, *ngSwitchCase, *ngSwitchDefault


Les Pipes permettent le formatage des données avant leur
affichage dans les vues.
-Pipes prédéfinis (et attributs associés) :
    -Datepipe
    -UpperCasePipe, LowerCasePipe
    -CurrencyPipe
    -DecimalPipe, PercentPipe
    -...

-Utilisable directement dans la vue :
    -{{variable-model | nom-pipe | ..}}

-Possibilité de créer des pipes métier grâce au décorateur @Pipe

-------------------------------------------------------------------

Un service est une fonctionnalité (ensemble de traitements)
nécessaire à une application.
-Possibilité de réutiliser un service plusieurs fois.
-1 service = 1 classe TypeScript avec des méthodes publiques utilisables
        par d'autres éléments de l'application (ex: composant)
-Décorateur @Injectable à ajouter (conseillé)

-----------------------------------------------------------------

Voir exemple cours à page 72 pour mieux comprendre le tout.

Faire un composant pour la barre de connexion :
-Barre située en haut du layout.
-un bouton-lien Se connecter qui fait afficher le formulaire
-Si connecté, affiche le pseudo de la personne et
        sa dernière heure de connexion sur la machine (local storage)
-Si connecté, affiche le bouton-lien pour se déconnecter

Utiliser les directives structurelles pour faire apparaître
des composants Angular sous certaines conditions.
->Formulaire uniquement si param GET /login et si
la session n'est pas déjà établie.
->Barre de connexion affiche des choses différentes selon si
l'utilisateur est connecté ou pas (attr bool dans composant)

GET / pour afficher la page d'accueil
GET /login pour afficher le formulaire
POST /login {data identifiants} pour faire une demande de login

Le chargement d'une vue se fait par appel au Controleur qui fait 
une requête AJAX.



Objectif fin étape 2 :
1)Je me connecte à la racine du site:
    -Si j'ai une session de déjà ouverte => affichage du nom de l'utilisateur
            connecté et de la dernière heure de connexion dans la barre de 
            connexion. Je peux me déconnecter (fermer session + détruire localstorage)
    -Sinon => affichage du formulaire de login.

2)Le formulaire de login envoie les infos à POST /login
    -Si la connexion a réussi
        =>Ouverture de la session
        =>Redirection vers racine du site
        =>Affichage du bandeau succès (on met les attributs du composant
            bool visible=true et BannerType=SUCCESS)
    -Sinon 
        =>Redirection vers racine du site
        =>Affichage du bandeau erreur




Checker le Datepipe pour la présentation de la date
de dernière connexion.

Pour le formulaire d'authentification, faire un event binding du
submit du form à une méthode du composant loginform (onSubmit), qui va
faire appel au service Authentification, injecté au préalable
lors de la construction du composant.
Pour le service Authentification, voir cours page 61.
https://e-uapv2020.univ-avignon.fr/pluginfile.php/100526/mod_resource/content/0/stackMEAN_2020-2021-part3.pdf
-> création d'observables et d'observers.
-> envoie d'une requête HTTP POST
-> en cas de succès ça ajoute un token dans le local storage et ca return true
-> en cas d'échec, ca return false
-> dans la méthode du composant appelant, on pourra tester la valeur retour, 
    et en fonction de sa valeur afficher un bandeau différent.


Suite à la vérification des identifiants (méthode onSubmit() du loginform), 
dans le cas où ça fonctionne on stocke dans le localstorage les données
de l'utilisateur en question. La loginform doit communiquer avec le bandeau
de notification pour afficher le message approprié selon l'issue de la
tentative d'authentification.
Une idée pourrait être faire appel au composant père pour notifier tous
les composants, chaque composant aurait une méthode refresh() qui sera 
appelée lors de la notification.
Pour ça il faut utiliser @Output côté composant enfant pour envoyer l'info
au composant père ?



Pour l'instant dans le local storage y'a :
-<nomUtilisateur>:
    -dernière heure de connexion
    -heure de connexion courante
-user: <nomUtilisateurConnecte>

Et dans la bdd mongodb :
-sessions ouvertes